import styles from "./index.module.css";
import { type NextPage } from "next";
import Head from "next/head";

import { api } from "../utils/api";
import { useState, useEffect, Fragment } from "react";
import { MessageRes, InteractionRes } from "../server/logic/bot";

const Answer = (props: { myPrompt: string }) => {
    const promptEmpty = !props.myPrompt || props.myPrompt.trim() === "";
    if (promptEmpty) {
        return <div>Enter the prompt</div>;
    }
    
    // const data = api.example.hello.useQuery(props.myPrompt);
    // prevent the api call if it's re-rendered
    const data = api.example.hello.useQuery(props.myPrompt, { refetchOnWindowFocus: false });

    if (data) {
        return <div>{data.data?.greeting}</div>;
    }

    return <div>loading... {props.myPrompt}</div>;
};

const Message = (props: {setInterId: Function, setInterMsgId: Function}) => {
    // https://stackoverflow.com/a/57414544
    const [timer, setTimer] = useState(new Date());

    useEffect(() => {
        const interval = setInterval(() => {
           setTimer(new Date());
        }, 5000);
     
        // This is important, you must clear your interval when component unmounts
        return () => clearInterval(interval);
     }, []);

    const handleInteract = (id: string, msgId: string) => {
        props.setInterId(id);
        props.setInterMsgId(msgId);
        console.log("interact with id: " + id + " and msgId: " + msgId)
    }

    const data = api.example.messages.useQuery();
    console.log(data.data);
    if (data) {
        const messages = data.data;
        if (!messages) return <div>loading...</div>;

        return (
            <Fragment key={timer.toISOString()}>{messages.map((message: MessageRes) => {
                return (
                    <><img src={message.url} style={{ width: "50%" }}></img>
                    <div className="btn-group">
                        {message.interactions.map((interaction: InteractionRes) => {
                            return <button data-inline="true" onClick={() => handleInteract(interaction.id, message.id)}>{interaction.label?interaction.label: "reroll"}</button>
                        })
                        }
                    </div></>
                )
            })
            }</Fragment>
        )
    }

    return <div>loading...</div>;
}

const Interact = (props: { id: string, msgId: string}) => {
    console.log(`[Interact] id: ${props.id}, msgId: ${props.msgId}`);
    if (!props.msgId || props.msgId === "") return <div>no interact...</div>;

    const data = api.example.interact.useQuery(props, { refetchOnWindowFocus: false });
    if (data) {
        return <div>Interacted {data.data}. (Waiting to start)</div>;
    }

    return <div>no interact...</div>;
}

const Home: NextPage = () => {
    const [myPrompt, setPrompt] = useState("");
    const [interId, setInterId] = useState("");
    const [interMsgId, setInterMsgId] = useState("");

    const handleClick = () => {
        // get text from textarea
        const text = document.querySelector("textarea")?.value;
        if (!text) return;

        setPrompt(text);
    };

    return (
        <>
        <Head>
            <title>Create T3 App</title>
            <meta name="description" content="Generated by create-t3-app" />
            <link rel="icon" href="/favicon.ico" />
        </Head>

        <main>
            <div className={styles.container}>
                <h1>
                Create <span className={styles.pinkSpan}>T3</span> App
                </h1>
                {/* on submit, call api */}
                <textarea className={styles.textarea}> </textarea>
                <button onClick={handleClick} style={{ width: "50%" }}>Submit</button>
                <Answer myPrompt={myPrompt}/>
                <Message key={myPrompt} setInterId={setInterId} setInterMsgId={setInterMsgId}></Message>
                <Interact id={interId} msgId={interMsgId}></Interact>
            </div>
        </main>
        </>
    );
};

export default Home;

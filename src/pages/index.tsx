import styles from "./index.module.css";
import { type NextPage } from "next";
import Head from "next/head";

import { api } from "../utils/api";
import { useState, useEffect, Fragment, useCallback } from "react";
import { MessageRes, InteractionRes } from "../server/logic/bot";
import { SvgConverter } from "./svg";
import { Button, Input, TextField } from "@mui/material";
import ReactMarkdown from 'react-markdown'

const Answer = (props: { myPrompt: string }) => {
    const promptEmpty = !props.myPrompt || props.myPrompt.trim() === "";
    if (promptEmpty) {
        return <div></div>;
    }
    
    // const data = api.example.hello.useQuery(props.myPrompt);
    // prevent the api call if it's re-rendered
    const data = api.example.hello.useQuery(props.myPrompt, { refetchOnWindowFocus: false });

    if (data) {
        return <div>{data.data?.greeting}</div>;
    }

    return <div>loading... {props.myPrompt}</div>;
};

const Message = (props: {setInterId: Function, setInterMsgId: Function, setConvertUrl: Function}) => {
    // https://stackoverflow.com/a/57414544
    const [timer, setTimer] = useState(new Date());

    useEffect(() => {
        const interval = setInterval(() => {
           setTimer(new Date());
        }, 5000);
     
        // This is important, you must clear your interval when component unmounts
        return () => clearInterval(interval);
     }, []);

    const handleInteract = (id: string, msgId: string) => {
        props.setInterId(id);
        props.setInterMsgId(msgId);
        console.log("interact with id: " + id + " and msgId: " + msgId)
    }

    const data = api.example.messages.useQuery();
    console.log(data.data);
    if (data) {
        const messages = data.data;
        if (!messages) return <div>loading...</div>;

        return (
            <Fragment key={timer.toISOString()}>{messages.map((message: MessageRes) => {
                return (
                    <Fragment key={message.id}> <img src={message.url} style={{ width: "50%" }}></img>
                    <ReactMarkdown>{message.content.replace("<@685528491361435713>", "@piko")}</ReactMarkdown>
                    <div className="btn-group">
                        {[...message.interactions.map((interaction: InteractionRes) => {
                            return <Button variant="outlined" data-inline="true" onClick={() => handleInteract(interaction.id, message.id)} key={message.id + interaction.id}>{interaction.label?interaction.label: interaction.emoji}</Button>
                        }),
                        !message.interactions.find(i => i.label === "U1") && message.interactions.length?
                            <Button variant="outlined" color="error" onClick={() => {props.setConvertUrl(message.url)}} key={message.id + "-convert"}>Convert</Button>:
                            <></>
                        ]}
                    </div>
                    </Fragment>
                )
            })
            }</Fragment>
        )
    }

    return <div>Loading...</div>;
}

const Interact = (props: { id: string, msgId: string}) => {
    console.log(`[Interact] id: ${props.id}, msgId: ${props.msgId}`);
    if (!props.msgId || props.msgId === "") return null;

    const data = api.example.interact.useQuery(props, { refetchOnWindowFocus: false });
    if (data) {
        return <div></div>;
    }

    return null;
}

const Home: NextPage = () => {
    const [myPrompt, setPrompt] = useState("");
    const [interId, setInterId] = useState("");
    const [interMsgId, setInterMsgId] = useState("");
    const [convertUrl, setConvertUrl] = useState("");
    const [text, setText] = useState("");

    const handleClick = () => {
        if (!text) return;
        setPrompt(text);
    };

    return (
        <>
        <Head>
            <title>Create T3 App</title>
            <meta name="description" content="Generated by create-t3-app" />
            <link rel="icon" href="/favicon.ico" />
        </Head>

        <main>
            <div className={styles.container}>
                <TextField placeholder="Enter Prompt" variant="outlined" fullWidth={true} multiline={true} rows={5} onChange={(e)=>setText(e.target.value)}></TextField>
                <Button variant="outlined" onClick={handleClick} style={{ width: "50%" }}>Submit</Button>
                <Answer myPrompt={myPrompt}/>
                <SvgConverter url={convertUrl}></SvgConverter>
                <Interact id={interId} msgId={interMsgId}></Interact>
                <Message key={myPrompt} setInterId={setInterId} setInterMsgId={setInterMsgId} setConvertUrl={setConvertUrl}></Message>
            </div>
        </main>
        </>
    );
};

export default Home;
